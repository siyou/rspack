name: Test
on:
  pull_request:
    paths:
      - "crates/**"
      - "packages/**"
      - "Cargo.toml"
      - "Cargo.lock"
      - "rust-toolchain.toml"
      - "package.json"
      - "pnpm-lock.yaml"
      - "pnpm-workspace.yaml"
    branches:
      - "**"
      - "!release-**"
    tags-ignore:
      - "**"

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            build: |
              set -e
              sudo apt-get -y install protobuf-compiler
              RUST_TARGET=x86_64-unknown-linux-gnu pnpm build:binding:release

    name: build-${{ matrix.settings.target }}
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: "16"
      - name: Setup node dependencies
        run: |
          npm install -g pnpm@7.25.0
          pnpm install
      - name: Install Rust
        if: ${{ !matrix.settings.docker }}
        run: rustup show
      - name: Cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: build-and-test
      - name: Setup rust target
        if: ${{ !matrix.settings.docker }}
        run: rustup target add ${{ matrix.settings.target }}
      - name: Install Protoc
        if: ${{ !matrix.settings.docker }}
        uses: arduino/setup-protoc@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - uses: goto-bus-stop/setup-zig@v2
        if: ${{ matrix.settings.target == 'armv7-unknown-linux-gnueabihf' || contains(matrix.settings.target, 'apple') }}
        with:
          version: 0.10.1
      - name: Setup toolchain
        run: ${{ matrix.settings.setup }}
        if: ${{ matrix.settings.setup }}
        shell: bash
      - name: Build
        run: ${{ matrix.settings.build }}
        shell: bash
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: bindings-${{ matrix.settings.target }}
          path: crates/node_binding/*.node
          if-no-files-found: error

  test-x86_64-unknown-linux-gnu:
    strategy:
      fail-fast: false
      matrix:
        node:
          - "14"
          - "16"
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - uses: actions/checkout@v3
      - name: Download bindings
        uses: actions/download-artifact@v3
        with:
          name: bindings-x86_64-unknown-linux-gnu
          path: crates/node_binding/
      - name: Show restored binding
        run: ls -lah crates/node_binding/*.node
      - name: Run tests
        run: |
          set -e
          npm install -g pnpm@7.25.0
          pnpm install
          pnpm run build:js

          pnpm --filter @rspack/core run test
          pnpm --filter @rspack/dev-server run test
          pnpm --filter @rspack/plugin-html run test
